import microservices from "../Phase 3/Administration/service_Administration.services" as services
import technology from "cqrs.technology" as cqrs
import technology from "domainEvents.technology" as domainEvents
import technology from "java.technology" as java
import technology from "kafka.technology" as kafka

@technology(java)
type services::administration::Administration.MeetingGroupLocation {
    aspects { java::_aspects.constructor(protectInitializing = true); }
    op create { aspects { java::_aspects.static; } }
}

@technology(java)
type services::administration::Administration.MeetingGroupProposal {
    aspects { java::_aspects.constructor(initializing = false); }
    op MeetingGroupProposal { aspects { java::_aspects.constructor; } }
    op createToVerify {
        aspects { java::_aspects.static; }
        parameters { meetingGroupProposalId : java::_types.UUID; }
    }
}

@technology(java)
type services::administration::Administration.MeetingGroupProposalId {
    value : java::_types.UUID;
}

@technology(java)
type services::administration::Administration.MeetingGroupProposalDecision {
    aspects { java::_aspects.constructor(protectInitializing = true); }
    op noDecision { aspects { java::_aspects.static; } }
    op acceptDecision { aspects { java::_aspects.static; } }
    op rejectDecision { aspects { java::_aspects.static; } }
}

@technology(java)
type services::administration::Administration.MeetingGroupProposalStatus {
    aspects { java::_aspects.constructor(protectInitializing = true); }
    op toVerify { aspects { java::_aspects.static; } }
    op verified { aspects { java::_aspects.static; } }
    op create { aspects { java::_aspects.static; } }
}

@technology(java)
type services::administration::Administration.Member {
    aspects { java::_aspects.constructor(initializing = false); }

    op Member {
        aspects { java::_aspects.constructor; }
        parameters { id : java::_types.UUID; }
    }

    op create {
        aspects { java::_aspects.static; }
        parameters { id : java::_types.UUID; }
    }
}

@technology(java)
type services::administration::Administration.MeetingGroupProposedIntegrationEvent {
    meetingGroupProposalId : java::_types.UUID;
    proposalUserId : java::_types.UUID;
}

@technology(java)
type services::administration::Administration.MeetingGroupProposalAcceptedIntegrationEvent {
    meetingGroupProposalId : java::_types.UUID;
    id : java::_types.UUID;
}

@technology(java)
type services::administration::Administration.NewUserRegisteredIntegrationEvent {
    userId : java::_types.UUID;
}

@technology(java)
type services::administration::Administration.MemberId {
    value : java::_types.UUID;
}

@technology(cqrs)
@technology(domainEvents)
@technology(java)
@technology(kafka)
services::org.example.administration.Administration {
    protocols { async: kafka::_protocols.kafka }
    endpoints { kafka::_protocols.kafka: "localhost:9092"; }
    aspects {
        java::_aspects.CustomProperty(name = "server.port", value = "8081");
        kafka::_aspects.BootstrapAddress("localhost:9092");
    }

    operation EmittedEvents.sendMeetingGroupProposalAcceptedIntegrationEvent {
        aspects {
            domainEvents::_aspects.Producer("AdministrationProducerService");
            kafka::_aspects.Participant(topic = "meetingGroupCreation");
        }
    }

    operation ReceivedEvents.receiveMeetingGroupProposedIntegrationEvent {
        aspects {
            domainEvents::_aspects.Consumer(handlerName = "AdministrationConsumerService");
            kafka::_aspects.Participant(
                topic = "meetingGroupCreation",
                consumerGroup = "receiveMeetingGroupProposedIntegrationEvent"
            );
        }
    }

    operation ReceivedEvents.receiveNewUserRegisteredIntegrationEvent {
        aspects {
            domainEvents::_aspects.Consumer(handlerName = "AdministrationConsumerService");
            kafka::_aspects.Participant(
                topic = "userRegistration",
                consumerGroup = "receiveNewUserRegisteredIntegrationEvent"
            );
        }
    }
}