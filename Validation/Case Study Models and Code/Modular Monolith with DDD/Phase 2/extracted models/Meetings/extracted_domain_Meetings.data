context Meetings {
	enum MeetingGroupProposalStatus {
		Accepted,
		InVerification,
		Rejected
	}

	structure Member <aggregate, entity> {
		MeetingGroupProposal meetinggroupproposal,
		ListMeetingAttendee meetingattendee <part>,
		ListMeetingNotAttendee meetingnotattendee <part>,
		ListMeetingWaitlistMember meetingwaitlistmember <part>,
		MemberSubscription membersubscription
	}

	structure MeetingGroupProposal <aggregate, entity> {
		Member member,
		MeetingGroupProposalStatus meetinggroupproposalstatus,
		MeetingGroup meetinggroup
	}

	structure MeetingAttendee <entity> {
		Member member,
		Meeting meeting
	}

	structure MeetingNotAttendee <entity> {
		Member member,
		Meeting meeting
	}

	structure MeetingWaitlistMember <entity> {
		Member member,
		Meeting meeting
	}

	structure Meeting <aggregate, entity> {
		ListMeetingAttendee meetingattendee <part>,
		ListMeetingNotAttendee meetingnotattendee <part>,
		ListMeetingWaitlistMember meetingwaitlistmember <part>,
		MeetingLocation meetinglocation <part>,
		MeetingGroup meetinggroup
	}

	structure MeetingGroup <aggregate, entity> {
		MeetingGroupProposal meetinggroupproposal,
		ListMeeting meeting,
		MemberSubscription membersubscription
	}

	structure MemberSubscription <aggregate, entity> {
		Member member,
		MeetingGroup meetinggroup
	}

	structure MeetingLocation <valueObject> {
		Meeting meeting
	}

	structure MeetingCommentingConfigurationCreatedDomainEvent <domainEvent, valueObject> {
		immutable boolean isEnabled,
		MeetingId meetingid
	}

	structure MeetingId <valueObject> {
		immutable string value
	}

	structure MeetingCommentingDisabledDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid
	}

	structure MeetingCommentingEnabledDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid
	}

	structure MeetingCommentId <valueObject> {
		immutable string value
	}

	structure MeetingCommentAddedDomainEvent <domainEvent, valueObject> {
		immutable string comment,
		MeetingId meetingid,
		MeetingCommentId meetingcommentid
	}

	structure MeetingCommentEditedDomainEvent <domainEvent, valueObject> {
		immutable string editedComment,
		MeetingCommentId meetingcommentid
	}

	structure MeetingCommentRemovedDomainEvent <domainEvent, valueObject> {
		MeetingCommentId meetingcommentid
	}

	structure ReplyToMeetingCommentAddedDomainEvent <domainEvent, valueObject> {
		immutable string reply,
		MeetingCommentId meetingcommentid,
		MeetingCommentId inReplyToCommentId
	}

	structure MeetingGroupProposalId <valueObject> {
		immutable string value
	}

	structure MeetingGroupProposalAcceptedDomainEvent <domainEvent, valueObject> {
		MeetingGroupProposalId meetinggroupproposalid
	}

	structure MeetingGroupProposedDomainEvent <domainEvent, valueObject> {
		immutable string name,
		immutable string description,
		immutable string locationCity,
		immutable string locationCountryCode,
		immutable date proposalDate,
		MeetingGroupProposalId meetinggroupproposalid,
		MemberId proposalUserId
	}

	structure MemberId <valueObject> {
		immutable string value
	}

	structure MeetingAttendeeChangedDecisionDomainEvent <domainEvent, valueObject> {
		MemberId memberid,
		MeetingId meetingid
	}

	structure MeetingGroupCreatedDomainEvent <domainEvent, valueObject> {
		MeetingGroupId meetinggroupid,
		MemberId creatorId
	}

	structure MeetingGroupId <valueObject> {
		immutable string value
	}

	structure MeetingGroupLocation <valueObject> {
		immutable string city,
		immutable string countryCode,
	
		function MeetingGroupLocation createNew(string city, string countryCode)
	}

	structure MeetingGroupGeneralAttributesEditedDomainEvent <domainEvent, valueObject> {
		immutable string newName,
		immutable string newDescription,
		MeetingGroupLocation newLocation
	}

	structure MeetingGroupMemberLeftGroupDomainEvent <domainEvent, valueObject> {
		MeetingGroupId meetinggroupid,
		MemberId memberid
	}

	structure MeetingGroupPaymentInfoUpdatedDomainEvent <domainEvent, valueObject> {
		immutable date paymentDateTo,
		MeetingGroupId meetinggroupid
	}

	structure MeetingNotAttendeeChangedDecisionDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid,
		MemberId memberid
	}

	structure NewMeetingGroupMemberJoinedDomainEvent <domainEvent, valueObject> {
		MemberId memberid,
		MeetingGroupId meetinggroupid,
		MeetingGroupMemberRole role
	}

	structure MeetingGroupMemberRole <valueObject> {
		immutable string value,
	
		function MeetingGroupMemberRole Organizer(),
		function MeetingGroupMemberRole Member(),
		function MeetingGroupMemberRole of(string roleCode)
	}

	structure MeetingAttendeeAddedDomainEvent <domainEvent, valueObject> {
		immutable date rsvpDate,
		immutable string role,
		immutable int guestsNumber,
		immutable double feeValue,
		immutable string feeCurrency,
		MeetingId meetingid,
		MemberId attendeeId
	}

	structure MeetingAttendeeFeePaidDomainEvent <domainEvent, valueObject> {
		MemberId attendeeId,
		MeetingId meetingid
	}

	structure MeetingAttendeeRemovedDomainEvent <domainEvent, valueObject> {
		immutable string reason,
		MeetingId meetingid,
		MemberId memberid
	}

	structure MeetingCanceledDomainEvent <domainEvent, valueObject> {
		immutable date cancelDate,
		MeetingId meetingid,
		MemberId cancelMemberId
	}

	structure MeetingCreatedDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid
	}

	structure MeetingEditedDomainEvent <domainEvent, valueObject> {
		immutable string meetingId
	}

	structure MeetingMainAttributesChangedDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid
	}

	structure MeetingNotAttendeeAddedDomainEvent <domainEvent, valueObject> {
		MemberId memberid,
		MeetingId meetingid
	}

	structure MeetingWaitlistMemberAddedDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid,
		MemberId memberid
	}

	structure MemberSetAsAttendeeDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid,
		MemberId hostId
	}

	structure MemberSignedOffFromMeetingWaitlistDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid,
		MemberId memberid
	}

	structure NewMeetingHostSetDomainEvent <domainEvent, valueObject> {
		MeetingId meetingid,
		MemberId hostId
	}

	structure MemberCreatedDomainEvent <domainEvent, valueObject> {
		MemberId memberid
	}

	structure MemberSubscriptionExpirationDateChangedDomainEvent <domainEvent, valueObject> {
		immutable date expirationDate,
		MemberId memberid
	}

	structure MemberCreatedIntegrationEvent <domainEvent, valueObject> {
		immutable string memberId,
		immutable string id,
		immutable date occurredOn
	}

	list ListMeetingAttendee {
		MeetingAttendee meetingAttendee
	}

	list ListMeetingNotAttendee {
		MeetingNotAttendee meetingNotAttendee
	}

	list ListMeetingWaitlistMember {
		MeetingWaitlistMember meetingWaitlistMember
	}

	list ListMeeting {
		Meeting meeting
	}

	structure NewUserRegisteredIntegrationEvent <domainEvent, valueObject> {
		string userId,
		string login,
		string email,
		string firstName,
		string lastName,
		string name
	}

	structure MeetingFeePaidIntegrationEvent <domainEvent, valueObject> {
		string id,
		date occuredOn,
		string payerId,
		string meetingId
	}

	structure MeetingGroupProposalAcceptedIntegrationEvent <domainEvent, valueObject> {
		string id,
		date occurredOn,
		string meetingGroupProposalId
	}

	structure SubscriptionExpirationDateChangedIntegrationEvent <domainEvent, valueObject> {
		date occuredOn,
		string id,
		string payerId,
		date expirationDate
	}

	structure MeetingGroupProposedIntegrationEvent <domainEvent, valueObject> {
		string meetingGroupProposalId,
		string name,
		string description,
		string locationCity,
		string locationCountryCode,
		string proposalUserId,
		date ProposalDate
	}

	structure MeetingAttendeeAddedIntegrationEvent <domainEvent, valueObject> {
		string id,
		date occuredOn,
		string meetingId,
		string attendeeId,
		double feeValue,
		string feeCurrency
	}
}
