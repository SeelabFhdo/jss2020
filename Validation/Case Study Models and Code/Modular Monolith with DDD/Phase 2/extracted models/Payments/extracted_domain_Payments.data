context Payments {
	enum MeetingFeePaymentStatus {
		WaitingForPayment,
		Paid,
		Expired
	}

	enum SubscriptionStatus {
		Active,
		Expired
	}

	enum SubscriptionRenewalPaymentStatus {
		WaitingForPayment,
		Paid,
		Expired
	}

	enum SubscriptionPaymentStatus {
		WaitingForPayment,
		Paid,
		Expired
	}

	enum SubscriptionPeriod {
		Month,
		HalfYear
	}

	enum PriceListItemCategory {
		New,
		Renewal
	}

	structure Country <valueObject> {
		ListPriceListItem pricelistitem
	}

	structure Payer <aggregate> {
		ListMeetingFee meetingfee,
		ListSubscription subscription
	}

	structure MeetingFee <aggregate> {
		Payer payer,
		ListMeetingFeePayment meetingfeepayment
	}

	structure MeetingFeePayment <aggregate> {
		MeetingFee meetingfee,
		MeetingFeePaymentStatus meetingfeepaymentstatus
	}

	structure Subscription <aggregate> {
		unspecified ExpirationDate,
		Payer payer,
		SubscriptionStatus subscriptionstatus,
		ListSubscriptionRenewalPayment subscriptionrenewalpayment,
		ListSubscriptionPayment subscriptionpayment,
		SubscriptionPeriod subscriptionperiod
	}

	structure SubscriptionRenewalPayment <aggregate> {
		Subscription subscription,
		SubscriptionRenewalPaymentStatus subscriptionrenewalpaymentstatus,
		SubscriptionPeriod subscriptionperiod
	}

	structure SubscriptionPayment <aggregate> {
		SubscriptionPaymentStatus subscriptionpaymentstatus,
		Subscription subscription,
		SubscriptionPeriod subscriptionperiod
	}

	structure PriceListItem <aggregate> {
		ListSubscriptionPeriod subscriptionperiod,
		PriceList pricelist,
		Country country,
		PriceListItemCategory pricelistitemcategory
	}

	structure PriceList <valueObject> {
		ListPriceListItem pricelistitem
	}

	structure MeetingFeePaymentCreatedDomainEvent <domainEvent, valueObject> {
		immutable string meetingFeePaymentId,
		immutable string meetingFeeId,
		immutable string status
	}

	structure MeetingFeeCreatedDomainEvent <domainEvent, valueObject> {
		immutable string meetingFeeId,
		immutable double feeValue,
		immutable string feeCurrency,
		immutable string meetingId,
		immutable string status,
		immutable string payerId
	}

	structure MeetingFeeCanceledDomainEvent <domainEvent, valueObject> {
		immutable string meetingFeeId,
		immutable string status
	}

	structure MeetingFeePaymentExpiredDomainEvent <domainEvent, valueObject> {
		immutable string meetingFeePaymentId,
		immutable string status
	}

	structure MeetingFeePaymentPaidDomainEvent <domainEvent, valueObject> {
		immutable string meetingFeePaymentId,
		immutable string status
	}

	structure MeetingFeeExpiredDomainEvent <domainEvent, valueObject> {
		immutable string meetingFeeId,
		immutable string status
	}

	structure MeetingFeePaidDomainEvent <domainEvent, valueObject> {
		immutable string status,
		immutable string meetingFeeId
	}

	structure PayerCreatedDomainEvent <domainEvent, valueObject> {
		immutable string payerId,
		immutable string login,
		immutable string firstName,
		immutable string lastName,
		immutable string name,
		immutable string email
	}

	structure PriceListItemActivatedDomainEvent <domainEvent, valueObject> {
		immutable string priceListItemId
	}

	structure PriceListItemAttributesChangedDomainEvent <domainEvent, valueObject> {
		immutable string priceListItemId,
		immutable string countryCode,
		immutable string subscriptionPeriodCode,
		immutable string categoryCode,
		immutable string currency,
		immutable long price
	}

	structure PriceListItemCreatedDomainEvent <domainEvent, valueObject> {
		immutable long price,
		immutable string subscriptionPeriodCode,
		immutable string currency,
		immutable string categoryCode,
		immutable string countryCode,
		immutable string priceListItemId,
		immutable boolean isActive
	}

	structure PriceListItemDeactivatedDomainEvent <domainEvent, valueObject> {
		immutable string priceListItemId
	}

	structure SubscriptionPaymentCreatedDomainEvent <domainEvent, valueObject> {
		immutable string subscriptionPaymentId,
		immutable string payerId,
		immutable string countryCode,
		immutable string subscriptionPeriodCode,
		immutable string status,
		immutable double value,
		immutable string currency
	}

	structure SubscriptionPaymentExpiredDomainEvent <domainEvent, valueObject> {
		immutable string status,
		immutable string subscriptionPaymentId
	}

	structure SubscriptionPaymentPaidDomainEvent <domainEvent, valueObject> {
		immutable string subscriptionPaymentId,
		immutable string status
	}

	structure SubscriptionRenewalPaymentCreatedDomainEvent <domainEvent, valueObject> {
		immutable string subscriptionRenewalPaymentId,
		immutable string payerId,
		immutable string subscriptionId,
		immutable string subscriptionPeriodCode,
		immutable string countryCode,
		immutable string status,
		immutable string currency,
		immutable double value
	}

	structure SubscriptionRenewalPaymentPaidDomainEvent <domainEvent, valueObject> {
		immutable string subscriptionId,
		immutable string status,
		immutable string subscriptionRenewalPaymentId
	}

	structure SubscriptionCreatedDomainEvent <domainEvent, valueObject> {
		immutable string payerId,
		immutable string subscriptionPaymentId,
		immutable string subscriptionId,
		immutable string subscriptionPeriodCode,
		immutable string countryCode,
		immutable date expirationDate,
		immutable string status
	}

	structure SubscriptionExpiredDomainEvent <domainEvent, valueObject> {
		immutable string subscriptionId,
		immutable string status
	}

	structure SubscriptionRenewedDomainEvent <domainEvent, valueObject> {
		immutable string subscriptionId,
		immutable date expirationDate,
		immutable string payerId,
		immutable string status,
		immutable string subscriptionPeriodCode
	}

	list ListPriceListItem {
		PriceListItem priceListItem
	}

	list ListMeetingFee {
		MeetingFee meetingFee
	}

	list ListSubscription {
		Subscription subscription
	}

	list ListMeetingFeePayment {
		MeetingFeePayment meetingFeePayment
	}

	list ListSubscriptionRenewalPayment {
		SubscriptionRenewalPayment subscriptionRenewalPayment
	}

	list ListSubscriptionPayment {
		SubscriptionPayment subscriptionPayment
	}

	list ListSubscriptionPeriod {
		SubscriptionPeriod subscriptionPeriod
	}

	structure NewUserRegisteredIntegrationEvent <domainEvent, valueObject> {
		string firstName,
		string name,
		string login,
		string lastName,
		string userId,
		string email
	}

	structure MeetingAttendeeAddedIntegrationEvent <domainEvent, valueObject> {
		string id,
		date occuredOn,
		string meetingId,
		string attendeeId,
		double feeValue,
		string feeCurrency
	}

	structure SubscriptionExpirationDateChangedIntegrationEvent <domainEvent, valueObject> {
		date occuredOn,
		string id,
		string payerId,
		date expirationDate
	}

	structure MeetingFeePaidIntegrationEvent <domainEvent, valueObject> {
		string id,
		date occuredOn,
		string payerId,
		string meetingId
	}
}
