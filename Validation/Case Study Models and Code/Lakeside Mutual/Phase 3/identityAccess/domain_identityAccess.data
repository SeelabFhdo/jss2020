context identityAccess {
	structure UserLoginRepository <repository> {
		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified id --> long id
		long id,

		UserLogin login,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified email --> string email
		function UserLogin findByEmail(string email)
	}

	structure UserDetailsService <service> {
		UserLoginRepository ^repository,

		// D2: Assign concrete names to parameters
		//		string unnamed --> string username
		function UserDetails loadUserByUsername(string username)
	}

	structure UserLogin <entity> {
		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified id --> long id
		long id <identifier>,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified authorities --> ListString authorities
		ListString authorities,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified email --> string email
		string email,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified password --> string password
		string password
	}

	structure UserSecurityDetails <entity> {
		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified id --> long id
		long id <identifier>,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified accountNonExpired --> boolean accountNonExpired
		boolean accountNonExpired,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified accountNonLocked --> boolean accountNonLocked
		boolean accountNonLocked,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified credentialsNonExpired --> boolean credentialsNonExpired
		boolean credentialsNonExpired,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified email --> string email
		string email,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified enabled --> boolean enabled
		boolean enabled,

		// D1: Replace unspecified type in data fields with concrete type
		//		unspecified password --> string password
		string password,

		ListString authorities
	}

	structure UserDetails <valueObject> {
		// D1: Replace unspecified type in data fields with concrete type
		//		immutable unspecified email --> immutable string email
		immutable string email
	}

	list ListString {
		string
	}
}
