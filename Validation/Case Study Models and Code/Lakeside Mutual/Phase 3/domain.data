context city {
    structure City <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified name --> immutable string name
        immutable string name,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified postalCode --> immutable string postalCode
        immutable string postalCode
    }

    structure CityShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified name --> immutable string name
        string name,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified postalCode --> immutable string postalCode
        string postalCode
    }

    list ListCityShared {
        CityShared cityShared
    }
}

context customer {
    structure CustomerRepository <repository> {
        ListCustomerAggregateRoot customerAggregateRoot,

        function CustomerId nextId()
    }

    structure CustomerFactory <service> {
        CustomerRepository customerRepository,

        // D2: Assign concrete names to parameters
        //      CustomerProfileEntity unnamed --> CustomerProfileEntity profile
        function CustomerAggregateRoot create(CustomerProfileEntity profile),

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified phoneNumberStr --> string phoneNumberStr
        procedure formatPhoneNumber(string phoneNumberStr)
    }

    structure CustomerService <service> {
        // D2: Assign concrete names to parameters
        //      CustomerId unnamed --> CustomerId customerId
        function CustomerAggregateRoot updateAddress(CustomerId customerId, Address unspecified1),

        // D2: Assign concrete names to parameters
        //      CustomerId unnamed --> CustomerId customerId
        function CustomerAggregateRoot updateCustomerProfile(CustomerId customerId, CustomerProfileEntity unspecified1),

        // D2: Assign concrete names to parameters
        //      CustomerProfileEntity unnamed --> CustomerProfileEntity profile
        function CustomerAggregateRoot createCustomer(CustomerProfileEntity profile),

        function ListCustomerAggregateRoot getCustomers(string ids)
    }

    structure CustomerProfileEntity <entity> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified firstname --> string firstname
        string firstname,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified lastname --> string lastname
        string lastname,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified birthday --> date birthday
        date birthday,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified email --> string email
        string email,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified phoneNumber --> string phoneNumber
        string phoneNumber,

        Address currentAddress,
        ListAddress moveHistory,

        // D2: Assign concrete names to parameters
        //      Address unnamed --> Address address
        procedure moveToAddress(Address address)
    }

    structure CustomerAggregateRoot <aggregate, entity> {
        CustomerId id <identifier, part>,
        CustomerProfileEntity customerProfile <part>,

        // D2: Assign concrete names to parameters
        //      Address unnamed --> Address address
        procedure moveToAddress(Address address),

        // D2: Assign concrete names to parameters
        //      CustomerProfileEntity unnamed --> CustomerProfileEntity profile
        procedure updateCustomerProfile(CustomerProfileEntity profile)
    }

    structure Address <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      hide immutable unspecified id --> hide immutable long id
        // D3: Specify default value for hidden immutable fields
        //      hide immutable long id, --> hide immutable long id = 0,
        hide immutable long id = 0,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified streetAddress --> immutable string streetAddress
        immutable string streetAddress,
        CityShared CityShared
    }

    structure CustomerId <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified id --> immutable long id
        immutable long id,

        function CustomerId random()
    }

    list ListCustomerAggregateRoot {
        CustomerAggregateRoot customerAggregateRoot
    }

    list ListAddress {
        Address address
    }

    structure CityShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified name --> string name
        string name,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified postalCode --> string postalCode
        string postalCode
    }

    structure CustomerShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified customerId --> string customerId
        long customerId,
        CustomerProfileShared customerProfile
    }

    structure CustomerProfileShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified firstname --> string firstname
        string firstname,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified lastname --> string lastname
        string lastname,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified birthday --> date birthday
        date birthday,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified email --> string email
        string email,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified phoneNumber --> string phoneNumber
        string phoneNumber,

        AddressShared address,
        ListAddressShared moveHistory
    }

    structure AddressShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified streetAddress --> string streetAddress
        string streetAddress,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified postalCode --> string postalCode
        string postalCode,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified city --> string city
        string city
    }

    list ListCustomerId {
        CustomerId customerId
    }

    list ListAddressShared {
        AddressShared addressShared
    }
}

context identityAccess {
    structure UserLoginRepository <repository> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified id --> long id
        long id,

        UserLogin login,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified email --> string email
        function UserLogin findByEmail(string email)
    }

    structure UserDetailsService <service> {
        UserLoginRepository ^repository,

        // D2: Assign concrete names to parameters
        //      string unnamed --> string username
        function UserDetails loadUserByUsername(string username)
    }

    structure UserLogin <entity> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified id --> long id
        long id <identifier>,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified authorities --> ListString authorities
        ListString authorities,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified email --> string email
        string email,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified password --> string password
        string password
    }

    structure UserSecurityDetails <entity> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified id --> long id
        long id <identifier>,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified accountNonExpired --> boolean accountNonExpired
        boolean accountNonExpired,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified accountNonLocked --> boolean accountNonLocked
        boolean accountNonLocked,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified credentialsNonExpired --> boolean credentialsNonExpired
        boolean credentialsNonExpired,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified email --> string email
        string email,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified enabled --> boolean enabled
        boolean enabled,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified password --> string password
        string password,

        ListString authorities
    }

    structure UserDetails <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified email --> immutable string email
        immutable string email
    }

    list ListString {
        string
    }
}

context interactionLog {
    structure InteractionLogRepository <repository> {
        ListInteractionLogAggregateRoot interactions
    }

    structure InteractionLogService <service> {
        InteractionLogRepository ^repository,

        function ListNotification getNotifications()
    }

    structure InteractionEntity <entity> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified id --> long id
        long id <identifier>,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified ^date --> date ^date
        date ^date,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified content --> string content
        string content,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified sentByOperator --> boolean sentByOperator
        boolean sentByOperator
    }

    structure InteractionLogAggregateRoot <aggregate, entity> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified username --> string username
        string username,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified lastAcknowledgedInteractionId --> long lastAcknowledgedInteractionId
        long lastAcknowledgedInteractionId,

        ListInteractionEntity interactions,

        function int getNumberOfUnacknowledgedInteractions()
    }

    structure Notification <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified username --> immutable string username
        immutable string username,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified count --> immutable int count
        immutable int count
    }

    list ListInteractionLogAggregateRoot {
        InteractionLogAggregateRoot interactionLogAggregateRoot
    }

    list ListNotification {
        Notification notification
    }

    list ListInteractionEntity {
        InteractionEntity interactionEntity
    }
}

context policy {
    structure RiskManagementService <service> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified originator --> long originator
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified ^date --> date ^date
        function PolicyEvent notifyRiskManagement(long originator, date ^date, CustomerShared customer, PolicyAggregateRoot policy)
    }

    structure InsuringAgreementEntity <entity> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified id --> long id
        long id <identifier>,

        ListInsuringAgreementItem items
    }

    structure PolicyAggregateRoot <aggregate, entity> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified creationDate --> date creationDate
        date creationDate,

        PolicyId id <identifier, part>,
        PolicyPeriod policyPeriod <part>,
        PolicyType policyType <part>,
        MoneyAmount policyLimit <part>,
        MoneyAmount insurancePremium <part>,
        InsuringAgreementEntity insuringAgreement
    }

    structure InsuringAgreementItem <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified id --> immutable long id
        immutable long id,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified title --> immutable string title
        immutable string title,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified description --> immutable string description
        immutable string description
    }

    structure MoneyAmount <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified amount --> immutable float amount
        immutable float amount,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified currency --> immutable string currency
        immutable string currency
    }

    structure PolicyId <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified id --> immutable long id
        immutable long id,

        function PolicyId random()
    }

    structure PolicyPeriod <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified startDate --> immutable date startDate,
        immutable date startDate,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified endDate --> immutable date endDate,
        immutable date endDate
    }

    structure PolicyType <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified name --> immutable string name,
        immutable string name
    }

    structure PolicyEvent <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified originator --> immutable long originator,
        immutable long originator,

        // D1: Replace unspecified type in data fields with concrete type
        //      immutable unspecified ^date --> immutable date ^date,
        immutable date ^date,

        CustomerShared CustomerShared
    }

    list ListInsuringAgreementItem {
        InsuringAgreementItem insuringAgreementItem
    }

    structure CustomerShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified customerId --> long customerId,
        long customerId,

        CustomerProfileShared customerProfile
    }

    structure CustomerProfileShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified firstname --> string firstname
        string firstname,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified lastname --> string lastname
        string lastname,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified birthday --> date birthday
        date birthday,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified email --> string email
        string email,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified phoneNumber --> string phoneNumber
        string phoneNumber,

        AddressShared address,
        ListAddressShared moveHistory
    }

    structure AddressShared <valueObject> {
        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified streetAddress --> string streetAddress
        string streetAddress,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified postalCode --> string postalCode
        string postalCode,

        // D1: Replace unspecified type in data fields with concrete type
        //      unspecified city --> string city
        string city
    }

    list ListAddressShared {
        AddressShared addressShared
    }
}
